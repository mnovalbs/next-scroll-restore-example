import { useState, useEffect, useCallback } from "react";
import Head from "next/head";
import Link from "next/link";
import axios from "axios";
import { useRecoilState } from "recoil";
import InfiniteScroll from "react-infinite-scroll-component";
import { useRouterScroll } from "@moxy/next-router-scroll";

import itemStore from "../../stores/items";
import styles from "../../styles/Home.module.css";
import itemStyles from "../../styles/Item.module.css";

function Item(item) {
  const { id, name, image } = item;

  return (
    <div className={itemStyles.container}>
      <Link href={`/item/${id}`} scroll>
        <img src={image} />
      </Link>
      <div>
        <Link href={`/item/${id}`} scroll>
          <a>{name}</a>
        </Link>
      </div>
    </div>
  );
}

export default function ItemList() {
  const [savedItems, setSavedItems] = useRecoilState(itemStore);
  const [page, setPage] = useState(0);
  const [items, setItems] = useState([]);
  const { updateScroll } = useRouterScroll();

  const addItems = (newItems) => {
    setItems((currentItems) => currentItems.concat(newItems));
    setPage((currentPage) => currentPage + 1);
  };

  const fetchData = (apiPage) => {
    axios
      .get("/api/item", {
        params: {
          page: apiPage || page + 1,
          limit: 10,
        },
      })
      .then(({ data }) => data.data)
      .then(addItems);
  };

  const divRef = useCallback(
    (node) => {
      const { locationKey } = window.history.state;
      const initialItems = savedItems[locationKey]?.items || [];
      const initialPage = savedItems[locationKey]?.page || 0;

      setItems(initialItems);
      setPage(initialPage);

      if (node) {
        updateScroll();
      }

      if (initialPage === 0) {
        fetchData(initialPage + 1);
      }
    },
    [updateScroll]
  );

  useEffect(() => {
    const { locationKey } = window.history.state;
    setSavedItems((currentSavedItems) => ({
      ...currentSavedItems,
      [locationKey]: {
        items,
        page,
      },
    }));
  }, [items, page]);

  return (
    <div ref={divRef} className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <InfiniteScroll
        dataLength={items.length}
        next={fetchData}
        scrollThreshold={0.9}
        loader="Loading..."
        hasMore
      >
        {items.map((item, i) => (
          <Item {...item} key={i} />
        ))}
      </InfiniteScroll>
    </div>
  );
}
